def tagMatchRules = [
  [
    meTypes: [
      [meType: 'SERVICE']
    ],
    tags : [
      [context: 'ENVIRONMENT', key: 'app', value: 'keptn-orders']
    ]
  ]
]

pipeline {
    agent any
    parameters {
        // these will be presented as build parameters 
        choice(name: 'frontend_version', choices: ['1'], description: '1 = Normal behavior')
    }
    environment {
        // stored as jenkins credentials. Values are masked
        DT_URL = "https://${env.DT_ACCOUNTID}"
        DT_TOKEN = "${env.DT_API_TOKEN}"

        // file locations
        DOCKER_COMPOSE_TEMPLATE_FILE = "lab4/docker-compose-frontend.template"
        DOCKER_COMPOSE_FILE = "lab4/docker-compose-frontend.yaml"
        WAIT_TILL_READY_FILE = "helper-scripts/wait-till-ready-frontend.sh"
        LOAD_TEST_FILE = "lab4/scripts/sendtraffic-frontend.sh"

        // build the docker image name using tag value passed as parameters
        frontendimage = "dtdemos/dt-orders-frontend:${params.frontend_version}"
    }
    stages {
        stage('configure-docker-compose-file') {
            steps {
                script {
                    echo "============================================="
                    echo "Deployment configuration"
                    echo "frontendimage          : ${env.frontendimage}"
                    echo "============================================="

                    // update the docker-compse file with the new image names
                    sh "cp -f ${DOCKER_COMPOSE_TEMPLATE_FILE} ${DOCKER_COMPOSE_FILE}"
                    sh "sed -i 's#REPLACE-FRONTEND-IMAGE#${env.frontendimage}#g' ${DOCKER_COMPOSE_FILE}"
                    sh "cat ${DOCKER_COMPOSE_FILE}"
					sh "chmod u+x ${LOAD_TEST_FILE} ${WAIT_TILL_READY_FILE}"
					
                }
            }
        }
		
		stage('docker-down') {
            steps {
    	        step([$class: 'DockerComposeBuilder', dockerComposeFile: "${DOCKER_COMPOSE_FILE}", option: [$class: 'StopAllServices'], useCustomDockerComposeFile: true])
            }
        }
        
        stage('docker-compose-up') {
            steps {
                step([$class: 'DockerComposeBuilder', dockerComposeFile: "${DOCKER_COMPOSE_FILE}", option: [$class: 'StartAllServices'], useCustomDockerComposeFile: true])
            }
        }

        stage('wait-till-ready') {
            steps {
                script {
                    sh "${WAIT_TILL_READY_FILE}"
                }
            }
        }
		
        stage('Push Dynatrace Deployment Event') {
			steps {
				createDynatraceDeploymentEvent(
					customProperties: [
						[key: 'JenkinsUrl', value: '${env.JOB_URL}'], 
						[key: 'BuildUrl', value: '${env.BUILD_URL}'], 
						[key: 'GitCommit', value: '${env.GIT_COMMIT}'], 
						[key: 'deploymentVersion', value: '${DEPLOY_VERSION}']
					],
					entityIds: [[$class: 'Service', entityId: 'SERVICE-B28FE70ECE238A2C']],
					envId: 'Dynatrace Demo Environment', 
					tagMatchRules: tagMatchRules
				) {
					// some block
				}
			}
        }
		
        stage('Performance Test') {
			steps {
				recordDynatraceSession(entityIds: [[$class: 'Service', entityId: 'SERVICE-B28FE70ECE238A2C']], envId: 'Dynatrace Demo Environment',  tagMatchRules: tagMatchRules, testCase: 'loadtest')
				{
					script {
						TEST_START = sh(script: 'echo "$(date -u +%s)"', returnStdout: true).trim()
						sh "${LOAD_TEST_FILE} 120 ${env.BUILD_TAG}"
						TEST_END = sh(script: 'echo "$(date -u +%s)"', returnStdout: true).trim()
						echo "TEST_START: ${TEST_START}  TEST_END: ${TEST_END}"
					}
				}
				echo "Waiting for a minute so data can be processed in Dynatrace"
				sleep(60)
			}
		}
		
		stage('Dynatrace Quality Gate'){
            steps {
                perfSigDynatraceReports envId: 'Dynatrace Demo Environment', nonFunctionalFailure: 2, specFile: './lab4/specfile.json'
            }
        }
    }
}
