def tagMatchRules = [
  [
    meTypes: [
      [meType: 'ENVIRONMENT']
    ],
    tags : [
      [context: 'CONTEXTLESS', key: 'app', value: 'keptn-orders']
    ]
  ]
]

pipeline {
    agent any
    parameters {
        // these will be presented as build parameters 
        choice(name: 'frontend_version', choices: ['1'], description: '1 = Normal behavior')
        choice(name: 'order_service_version', choices: ['1','2'], description: '1 = Normal behavior. 2 = 50% exception for /line URL and and n+1 back-end calls for /form.html')
        choice(name: 'customer_service_version', choices: ['1','2'], description: '1 = Normal behavior. 2 = High Response time for /list.html')
        choice(name: 'catalog_service_version', choices: ['1'], description: '1 = Normal behavior')
    }
    environment {
        // stored as jenkins credentials. Values are masked
        DT_URL = "https://${env.DT_ACCOUNTID}"
        DT_TOKEN = "${env.DT_API_TOKEN}"

        // file locations
        DOCKER_COMPOSE_TEMPLATE_FILE = "lab4/docker-compose.template"
        DOCKER_COMPOSE_FILE = "lab4/docker-compose.yaml"
        WAIT_TILL_READY_FILE = "helper-scripts/wait-till-ready.sh"
        LOAD_TEST_FILE = "lab3/sendtraffic.sh"

        // build the docker image name using tag value passed as parameters
        frontendimage = "dtdemos/dt-orders-frontend:${params.frontend_version}"
        orderserviceimage = "dtdemos/dt-orders-order-service:${params.order_service_version}"
        customerserviceimage = "dtdemos/dt-orders-customer-service:${params.customer_service_version}"
        catalogserviceimage = "dtdemos/dt-orders-catalog-service:${params.catalog_service_version}"
    }
    stages {
        stage('configure-docker-compose-file') {
            steps {
                script {
                    echo "============================================="
                    echo "Deployment configuration"
                    echo "frontendimage          : ${env.frontendimage}"
                    echo "orderserviceimage      : ${env.orderserviceimage}"
                    echo "customerserviceimage   : ${env.customerserviceimage}"
                    echo "catalogserviceimage    : ${env.catalogserviceimage}"
                    echo "============================================="

                    // update the docker-compse file with the new image names
                    sh "cp -f ${DOCKER_COMPOSE_TEMPLATE_FILE} ${DOCKER_COMPOSE_FILE}"
                    sh "sed -i 's#REPLACE-FRONTEND-IMAGE#${env.frontendimage}#g' ${DOCKER_COMPOSE_FILE}"
                    sh "sed -i 's#REPLACE-ORDER-IMAGE#${env.orderserviceimage}#g' ${DOCKER_COMPOSE_FILE}"
                    sh "sed -i 's#REPLACE-CUSTOMER-IMAGE#${env.customerserviceimage}#g' ${DOCKER_COMPOSE_FILE}"
                    sh "sed -i 's#REPLACE-CATALOG-IMAGE#${env.catalogserviceimage}#g' ${DOCKER_COMPOSE_FILE}"
                    sh "cat ${DOCKER_COMPOSE_FILE}"
                }
            }
        }

        stage('docker-down') {
            steps {
    	        step([$class: 'DockerComposeBuilder', dockerComposeFile: "${DOCKER_COMPOSE_FILE}", option: [$class: 'StopAllServices'], useCustomDockerComposeFile: true])
            }
        }
        
        stage('docker-compose-up') {
            steps {
                step([$class: 'DockerComposeBuilder', dockerComposeFile: "${DOCKER_COMPOSE_FILE}", option: [$class: 'StartAllServices'], useCustomDockerComposeFile: true])
            }
        }

        stage('wait-till-ready') {
            steps {
                script {
                    sh "${WAIT_TILL_READY_FILE}"
                }
            }
        }

        stage('Push Dynatrace Deployment Event') {
			steps {
				createDynatraceDeploymentEvent(
					customProperties: [
						[key: 'JenkinsUrl', value: '${env.JOB_URL}'], 
						[key: 'BuildUrl', value: '${env.BUILD_URL}'], 
						[key: 'GitCommit', value: '${env.GIT_COMMIT}'], 
						[key: 'deploymentVersion', value: '${DEPLOY_VERSION}']
					], 
					envId: 'Dynatrace Demo Environment', 
					tagMatchRules: tagMatchRules
				) {
					// some block
				}
			}
        }
		
        stage('Performance Test') {
			steps {
				recordDynatraceCustomSession envId: 'Dynatrace Demo Environment',  tagMatchRules: tagMatchRules, testCase: 'loadtest'
			}
		}
		
		stage('Reporting') {
			steps {
				perfSigDynatraceReports envId: 'Dynatrace Demo Environment', nonFunctionalFailure: 2, specFile: 'specfile.json'
			}
		}
    }
}
